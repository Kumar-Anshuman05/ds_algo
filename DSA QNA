Q1.
Given an array of positive integers arr[] of size n, the task is to find second largest distinct element in the array.

Note: If the second largest element does not exist, return -1.

ANSWER>>
class Solution {
  public:
    int getSecondLargest(vector<int> &arr) {
        int n = arr.size();
        // code here
        if (n < 2) return -1; 

    int largest = INT_MIN;
    int second = INT_MIN;

    for (int i = 0; i < n; ++i) {
        if (arr[i] > largest) {
            second = largest;
            largest = arr[i];
        } else if (arr[i] > second && arr[i] < largest) {
            second = arr[i];
        }
    }

    return (second == INT_MIN) ? -1 : second;
    }
};


Q2.Given an integer n, we need to repeatedly find the sum of its digits until the result becomes a single-digit number.

Examples:
Input: n = 1234 
Output: 1 
Explanation:
Step 1: 1 + 2 + 3 + 4 = 10 
Step 2: 1 + 0 = 1

ANSWER>>
#include<iostream>
using namespace std;

int addrepetitive(int n)
{
    while (n >9)
    {
        int sum = 0;
        while (n > 0) 
        {
            sum = sum + n % 10;
            n = n / 10;    
        }
        n = sum;
    }
    return n;
}

int main()
{
    int n=9;
    cout << "Single digit after repetitive addition: " << addrepetitive(n);
}


ANSWER2>>
#include <iostream>
using namespace std;
int adddigits(int n)
{
    int sum = 0;
        while (n > 0) 
        {
            sum = sum + n % 10;
            n = n / 10;    
        }
        n = sum;
    return n;
}
int addrepetitive(int m)
{
    while (m > 9)
    {
      m=adddigits(m);
    }
    return m;
}

int main()
{
    int n=915;
    cout << "Single digit after repetitive addition: " << addrepetitive(n);
}


Q3. Find the pow ; user input ?
ANSWER1>>
#include<iostream>
using namespace std;

long int POW(int b,int e)
{
   long int ans=1;
   for(int i=1;i<=e;i++)
   {
       ans=ans*b;
   }
   return(ans);
}

int main()
{
    int b,e;
    cout<<"enter the base- ";
    cin>>b;
    cout<<"enter the exponential- ";
    cin>>e;
    cout<<"output is = "<<POW(b,e)<<endl;
}

ANSWER2>>
#include<iostream>
using namespace std;

long int POW(int b,int e)
{
   int ans=b;
   if(e>1)
   {
      return ans*POW(ans,(e-1));
   }
   return(ans);
}

int main()
{
    int b,e;
    cout<<"enter the base- ";
    cin>>b;
    cout<<"enter the exponential- ";
    cin>>e;
    cout<<"output is = "<<POW(b,e)<<endl;
}

Q.FIND THE Nth TERM OF FIBONACCI SERIES ?

ANSWER>>
#include<iostream>
using namespace std;

int fibonacci(int n)
{
   if(n<2)
   {
       return(n);
   }
   int x=0 , y=1 ,z;
   for(int i=2;i<=n;i++)
   {
       z=x+y;
       x=y;
       y=z;
   }
   return(z);
}


int main()
{
    int n;
    cout<<"position = ";
    cin>>n;
    cout << n << " th position of fibonacci series is: " << fibonacci(n) << endl;
}


WITH RECURSION
ANSWER>>
#include<iostream>
using namespace std;

int fibonacci(int n)
{
    if (n < 2)
    {
    return n;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

int main()
{
    int n;
    cout<<"position = ";
    cin>>n;
    cout << n << " th position of fibonacci series is: " << fibonacci(n) << endl;
}

abhi bhai question
#include <iostream>
#include <cstdint>  
#include <limits>     
#include <cstring>    

using namespace std;

const int ARRAY_SIZE = 10;
const int NAME_MAX_LENGTH = 30;
struct Person
{
    char name[NAME_MAX_LENGTH];
    uint8_t age;
};
void get_persons(Person persons[], int size)
{
    for (int i = 0; i < size; ++i) 
    {
        cout << "Enter details for person " << i + 1 << ":" << endl;
        cout << "Name (max 30 characters): ";
        cin.getline(persons[i].name, NAME_MAX_LENGTH);
        while (true)
        {
            int temp_age;
            cout << "Age (0-255): ";
            if (cin >> temp_age && temp_age >= 0 && temp_age <= 255) 
            {
                persons[i].age = static_cast<uint8_t>(temp_age);
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                break;
            } 
            else
            {
                cout << "Invalid input. Please enter a number between 0 and 255." << endl;
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
            }
        }
    }
}
void print_persons(const Person persons[], int size) 
{
    cout << "\n--- List of Persons ---\n";
    for (int i = 0; i < size; ++i) 
    {
        cout << "Person " << i + 1 << ":\n";
        cout << "Name: " << persons[i].name << endl;
        cout << "Age: " << static_cast<int>(persons[i].age) << endl;
        cout << "--------------------------" << endl;
    }
}
int main() 
{
    Person persons_array[ARRAY_SIZE];
    get_persons(persons_array, ARRAY_SIZE);
    print_persons(persons_array, ARRAY_SIZE);
}

QUESTION>>
Given an integer array arr[] and an integer ele the task is to the remove all occurrences of ele from arr[] in-place and return the number of elements which are not equal to ele. If there are k number of elements which are not equal to ele then the input array arr[] should be modified such that the first k elements should contain the elements which are not equal to ele and then the remaining elements.

Note: The order of first k elements may be changed.

ANSWER>>
#include <iostream>
using namespace std;

int answer(int arr[], int n, int ele) 
{
    int k = 0;
    for (int i = 0; i < n; i++) 
    {
        if (arr[i] != ele) 
        {
            arr[k] = arr[i];
            k++;
        }
    }
    return k;
}

int main() 
{
    int arr[] = {3, 2, 2, 3, 4, 2, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    int ele = 2;

    int k =answer(arr, n, ele);

    cout << "k = " << k << endl;
    cout << "Modified array: ";
    for (int i = 0; i < k; i++) 
    {
        cout << arr[i] << " , ";
    }
    cout << endl;
}
